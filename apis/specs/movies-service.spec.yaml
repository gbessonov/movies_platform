openapi: 3.0.3
info:
  title: Movies Service API
  description: API for managing movies and their ratings.
  version: 1.0.0

servers:
  - url: "http://{server}"
    variables:
      server:
        default: localhost:8765

paths:
  /api/movies:
    get:
      tags:
        - Movies
      summary: List movies
      operationId: getMovies
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movies'
    post:
      tags:
        - Movies
      summary: Create a new movie
      operationId: createMovie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMovie'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/movies/{id}:
    get:
      tags:
        - Movies
      summary: Get movie by identifier
      operationId: getMovieById
      parameters:
        - name: id
          in: path
          required: true
          description: Identifier for the movie
          schema:
            type: string
          example: "e7f9bf39-286d-4c5b-8ef4-c0e7a5a8232f"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieResponse'
    patch:
      tags:
        - Movies
      summary: Update an existing movie
      operationId: updateMovie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMovie'
      parameters:
        - name: id
          in: path
          required: true
          description: Identifier for the movie
          schema:
            type: string
          example: "e7f9bf39-286d-4c5b-8ef4-c0e7a5a8232f"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieResponse'
    delete:
      tags:
        - Movies
      summary: Delete a movie
      operationId: deleteMovie
      parameters:
        - name: id
          in: path
          required: true
          description: Identifier for the movie to delete
          schema:
            type: string
          example: "e7f9bf39-286d-4c5b-8ef4-c0e7a5a8232f"
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/movies/{id}/like:
    post:
      tags:
        - MovieLikes
      summary: Mark a movie as liked
      operationId: likeMovie
      parameters:
        - name: id
          in: path
          required: true
          description: Identifier for the movie
          schema:
            type: string
          example: "e7f9bf39-286d-4c5b-8ef4-c0e7a5a8232f"
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/movies/{id}/unlike:
    post:
      tags:
        - MovieLikes
      summary: Remove movie from liked list
      operationId: unlikeMovie
      parameters:
        - name: id
          in: path
          required: true
          description: Identifier for the movie
          schema:
            type: string
          example: "e7f9bf39-286d-4c5b-8ef4-c0e7a5a8232f"
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    MovieResponse:
      oneOf:
        - $ref: '#/components/schemas/Movie'
        - $ref: '#/components/schemas/ErrorResponse'

    CreateMovie:
      type: object
      properties:
        title:
          type: string
          description: Title of the movie
          example: "Inception"
      required:
        - title
    UpdateMovie:
      type: object
      properties:
        title:
          type: string
          description: Title of the movie
          example: "Inception"
      required:
        - title

    Movie:
      allOf:
        - $ref: '#/components/schemas/CreateMovie'
        - type: object
          properties:
            id:
              type: string
              format: uuid
              description: Unique identifier for the movie
              example: "e7f9bf39-286d-4c5b-8ef4-c0e7a5a8232f"
            likes:
              type: integer
              description: Number of likes for the movie
              example: 42

    Movies:
      type: array
      items:
        $ref: '#/components/schemas/Movie'

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error type
          example: "NOT_FOUND"
        message:
          type: string
          description: Human-readable error message
          example: "Resource with name 'some-name' not found"
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
          example: "2024-01-15T10:30:00Z"
      required:
        - error
        - message
