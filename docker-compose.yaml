name: movies-platform

networks:
  edge:           # public-facing network (only nginx attaches here)
    name: movies_edge
    driver: bridge
  internal:       # private network for svc-to-svc and DB
    name: movies_internal
    driver: bridge
    internal: true

volumes:
  movies_db_data:
  users_db_data:
  grafana_data:

services:
  # --- Gateway ---
  gateway:
    image: ${GATEWAY_NGINX_IMAGE}
    container_name: gateway
    environment:
      USERS_SERVICE_PORT: ${USERS_SERVICE_PORT}
      MOVIES_SERVICE_PORT: ${MOVIES_SERVICE_PORT}
    depends_on:
      movies-service:
        condition: service_started
      users-service:
        condition: service_started
    ports:
      - "${GATEWAY_SERVICE_PORT}:80"            # only exposed port
    volumes:
      - ./services/gateway/templates/default.conf.template:/etc/nginx/templates/default.conf.template:ro
      - ./services/gateway/__docker-entrypoint.sh:/__docker-entrypoint.sh:ro
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost/healthz" ]
      interval: 10s
      timeout: 3s
      retries: 10
    networks:
      - edge
      - internal

  # --- Microservices ---
  movies-service:
    build:
      context: ./services/movies
      dockerfile: Dockerfile
    container_name: movies_service
    depends_on:
      movies-db:
        condition: service_healthy
    #TODO: healthcheck:
    environment:
      SERVER_PORT: ${MOVIES_SERVICE_PORT}
      MOVIES_SERVICE_PORT: ${MOVIES_SERVICE_PORT}
      MOVIES_DB_URL: ${MOVIES_DB_URL}
      MOVIES_DB_USER: ${MOVIES_DB_USER}
      MOVIES_DB_PASSWORD: ${MOVIES_DB_PASSWORD}
      SPRING_PROFILES_ACTIVE: docker
      JWT_KEY: ${JWT_KEY}
      OTEL_SERVICE_NAME: "movies-service"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4318"
      OTEL_EXPORTER_OTLP_PROTOCOL: "http/protobuf"
      OTEL_RESOURCE_ATTRIBUTES: "service.name=movies-service,service.version=1.0.0"
      OTEL_METRICS_EXPORTER: "otlp"
      OTEL_LOGS_EXPORTER: "otlp"
      OTEL_TRACES_EXPORTER: "otlp"
    expose:
      - "${MOVIES_SERVICE_PORT}" # reachable only inside 'internal' and by gateway
    networks:
      internal:
        aliases:
          - movies-service

  users-service:
    build:
      context: ./services/users
      dockerfile: Dockerfile
    container_name: users_service
    depends_on:
      users-db:
        condition: service_healthy
    #TODO: healthcheck:
    environment:
      SERVER_PORT: ${USERS_SERVICE_PORT}
      USERS_SERVICE_PORT: ${USERS_SERVICE_PORT}
      USERS_DB_URL: ${USERS_DB_URL}
      USERS_DB_USER: ${USERS_DB_USER}
      USERS_DB_PASSWORD: ${USERS_DB_PASSWORD}
      SPRING_PROFILES_ACTIVE: docker
      JWT_KEY: ${JWT_KEY}
      JWT_ISSUER: ${JWT_ISSUER}
      JWT_AUDIENCE: ${JWT_AUDIENCE}
      JWT_EXPIRATION_SECONDS: ${JWT_EXPIRATION_SECONDS}
      OTEL_SERVICE_NAME: "users-service"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4318"
      OTEL_EXPORTER_OTLP_PROTOCOL: "http/protobuf"
      OTEL_RESOURCE_ATTRIBUTES: "service.name=users-service,service.version=1.0.0"
      OTEL_METRICS_EXPORTER: "otlp"
      OTEL_LOGS_EXPORTER: "otlp"
      OTEL_TRACES_EXPORTER: "otlp"
    expose:
      - "${USERS_SERVICE_PORT}" # reachable only inside 'internal' and by gateway
    networks:
      internal:
        aliases:
          - users-service

  # --- Databases ---
  movies-db:
    image: postgres:16
    container_name: ${MOVIES_DB_HOST}
    environment:
      POSTGRES_DB: ${MOVIES_DB_NAME}
      POSTGRES_USER: ${MOVIES_DB_USER}
      POSTGRES_PASSWORD: ${MOVIES_DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 2s
      retries: 10
    volumes:
      - movies_db_data:/var/lib/postgresql/data
    networks:
      - internal

  users-db:
    image: postgres:16
    container_name: users_db
    environment:
      POSTGRES_DB: ${USERS_DB_NAME}
      POSTGRES_USER: ${USERS_DB_USER}
      POSTGRES_PASSWORD: ${USERS_DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 2s
      retries: 10
    volumes:
      - users_db_data:/var/lib/postgresql/data
    networks:
      - internal

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./services/telemetry/collector-config.yml:/etc/otel-collector-config.yml:ro
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus exporter metrics
    networks:
      - internal
      - edge

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686"  # Jaeger Web UI
      - "14250:14250"  # Jaeger gRPC
    networks:
      - internal
      - edge

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./services/telemetry/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - internal
      - edge

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./services/telemetry/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./services/telemetry/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      prometheus:
        condition: service_started
      jaeger:
        condition: service_started
    networks:
      - internal
      - edge
